# Función para mostrar texto con color
function Write-ColoredText {
    param (
        [string]$Text,
        [string]$ForegroundColor = "White"
    )
    Write-Host $Text -ForegroundColor $ForegroundColor
}

$programas = @(
    "Portal empresa",
    "VPN",
    "Falcon",
    "Netskope client",
    "MicroClaudia",
    "Configurador FNMT",
    "SafeSign",
    "Bit4idUniversalMW",
    "IvantiSecureAccessClient",
    "Java 8",
    "Gestionar TAFU",
    "Autofirma",
    "Jabber",
    "Adobe Reader DC",
    "PDFBOX",
    "Azure_|_P_Visor",
    "BorrarCacheEdge"
)

$programasInstalados = @{}
$programasNoInstalados = @()

function Comprobar-CrowdStrike-Falcon {
    $key = "HKLM:\SOFTWARE\Microsoft\IntuneManagementExtension\Inventories\0000abe1cd84abbbe66442e672b3a55e1a4b0000ffff"
    if (Test-Path $key) {
        $properties = Get-ItemProperty -Path $key -ErrorAction SilentlyContinue
        if ($properties -and $null -ne $properties.Version) {
            return "CrowdStrike Falcon instalado, versión: $($properties.Version)"
        } else {
            return "FALLO: CrowdStrike Falcon: Se encontró la clave del registro, pero no se pudo determinar la versión"
        }
    } else {
        return "CrowdStrike Falcon no está instalado (clave del registro no encontrada)"
    }
}

function Comprobar-Programa-Especifico {
    
`   # TODO: Mejorar esta logica. Se puede unir todo en una misma funcion

    param([string]$programa)

    $rutas = @{
        "Adobe Reader DC" = "HKLM:\SOFTWARE\Microsoft\IntuneManagementExtension\Inventories\0000fd2eecef51204992b404875a335aa7cf00000a04"
        "Gestionar TAFU" = "HKLM:\SOFTWARE\Microsoft\IntuneManagementExtension\Inventories\0000ea6be95340107cdfd611c0027ff7a4c400000a0c"
        "Configurador FNMT" = "HKLM:\SOFTWARE\Microsoft\IntuneManagementExtension\Inventories\0000bf711d322454110778f342d3a322f85e00000904"
        "MicroClaudia" = "HKLM:\SOFTWARE\Microsoft\IntuneManagementExtension\Inventories\00004aea500d15ef7a290a97eea674ea7b7700000a04"
        "PDFBOX" = "C:\Program Files\PDFBOX"
        "BorrarCacheEdge" = "C:\intune\00-COMUN-BorrarCacheEdge\00-COMUN-BorrarCacheEdge.ps1"
    }

    if ($rutas.ContainsKey($programa)) {
        $ruta = $rutas[$programa]

        if ($programa -eq "PDFBOX" -or $programa -eq "BorrarCacheEdge") {
            if (Test-Path $ruta) {
                return "Instalado"  # Para PDFBOX y BorrarCacheEdge, solo verificamos si existe la ruta
            }
        } else {
            if (Test-Path $ruta) {
                $properties = Get-ItemProperty -Path $ruta -ErrorAction SilentlyContinue
                if ($properties -and $null -ne $properties.Version) {
                    return $properties.Version
                }
            }
        }
    }
    return $null
}

function Buscar-ProgramaInstalado {
    param([string]$programa)
    $keys = @(
        "HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall\*",
        "HKLM:\Software\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall\*",
        "HKCU:\Software\Microsoft\Windows\CurrentVersion\Uninstall\*"
    )

    foreach ($key in $keys) {
        $installedApp = Get-ItemProperty $key -ErrorAction SilentlyContinue | Where-Object {
            $_.DisplayName -like "*$programa*"
        } | Select-Object -First 1
        if ($installedApp) {
            return $installedApp.DisplayVersion
        }
    }
    return $null
}

function Comprobar-Windows-Version {
    $currentBuild = [System.Environment]::OSVersion.Version.Build
    $lastKB = (Get-HotFix | Sort-Object InstalledOn -Descending | Select-Object -First 1).HotFixID

    $windowsNecesitaActualizacion = "`nWindows necesita actualizaciones"

    try {

        $webClient = New-Object System.Net.WebClient
        $webClient.Headers.Add("User-Agent", "PowerShell Script")

        # TODO: Buscar otra logica mas razonable, esta no funciona 

        $url = "https://support.microsoft.com/en-us/help/4000825"
        $content = $webClient.DownloadString($url)
        $latestBuild = [regex]::Match($content, "Version\s(\d+)").Groups[1].Value

        $url = "https://support.microsoft.com/en-us/help/4580980"
        $content = $webClient.DownloadString($url)
        $latestKB = [regex]::Match($content, "KB(\d+)").Groups[0].Value
    }
    catch {
        Write-ColoredText "No se pudo obtener la información más reciente de Windows. Usando valores predeterminados." "Yellow"
        $latestBuild = 19045  # Valor predeterminado, hay que revisarlo manualmente desde la web
        $latestKB = "KB5025221"   # Valor predeterminado, hay que revisarlo manualmente desde la web
    }

    $windowsStatus = "Build actual: $currentBuild (Última conocida: $latestBuild)`n"
    $windowsStatus += "Último KB instalado: $lastKB (Último conocido: $latestKB)`n"

    if ([int]$currentBuild -ge [int]$latestBuild -and $lastKB -eq $latestKB) {
        $windowsStatus += "Windows está actualizado"
    } else {
        $windowsStatus += $windowsNecesitaActualizacion
    }

    return $windowsStatus
}

# Comprobación de los programas
foreach ($programa in $programas) {
    $version = $null
    $resultadoEspecial = Comprobar-Programa-Especifico -programa $programa
    if ($null -ne $resultadoEspecial) {
        $version = $resultadoEspecial
    } elseif ($programa -eq "Falcon") {
        $resultado = Comprobar-CrowdStrike-Falcon
        if ($resultado -like "*instalado, version:*") {
            $version = $resultado -replace ".*version: (.*)", '$1'
        }
    } else {
        $version = Buscar-ProgramaInstalado -programa $programa
    }

    if ($null -ne $version) {
        $programasInstalados[$programa] = $version
    } else {
        $programasNoInstalados += $programa
    }
}

# Mostrar resultados
Write-ColoredText "`n=== Resumen de programas ===" "Cyan"
Write-ColoredText "`nEstado de Windows:" "Cyan"

$windowsStatus = Comprobar-Windows-Version

Write-ColoredText $windowsStatus "Cyan"
Write-ColoredText "`nProgramas Instalados:" "Green"

foreach ($programa in $programasInstalados.Keys) {
    Write-ColoredText "  + $programa (Version: $($programasInstalados[$programa]))" "Green"
}

Write-ColoredText "`nProgramas NO Instalados:" "Red"
$programasNoInstalados | ForEach-Object { Write-ColoredText "  - $_" "Red" }

Write-ColoredText "`n=== Fin del reporte ===" "Cyan"
Write-ColoredText "`nPresione Enter para salir..." "Yellow"

Read-Host | Out-Null